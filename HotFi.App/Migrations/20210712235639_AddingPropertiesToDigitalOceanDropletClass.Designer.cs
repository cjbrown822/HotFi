// <auto-generated />
using System;
using HotFi.App.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HotFi.App.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210712235639_AddingPropertiesToDigitalOceanDropletClass")]
    partial class AddingPropertiesToDigitalOceanDropletClass
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("HotFi.Library.Models.Application", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("ApplicationName")
                        .HasColumnType("text")
                        .HasColumnName("application_name");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean")
                        .HasColumnName("archived");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("archived_date");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("DigitalOceanDropletId")
                        .HasColumnType("text")
                        .HasColumnName("digital_ocean_droplet_id");

                    b.Property<string>("Domain")
                        .HasColumnType("text")
                        .HasColumnName("domain");

                    b.Property<string>("DropletId")
                        .HasColumnType("text")
                        .HasColumnName("droplet_id");

                    b.Property<string>("GitHubUrl")
                        .HasColumnType("text")
                        .HasColumnName("git_hub_url");

                    b.Property<int>("PortNumber")
                        .HasColumnType("integer")
                        .HasColumnName("port_number");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("DigitalOceanDropletId");

                    b.HasIndex("UserId");

                    b.ToTable("applications", "hotfi");
                });

            modelBuilder.Entity("HotFi.Library.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean")
                        .HasColumnName("archived");

                    b.Property<bool>("CanContact")
                        .HasColumnType("boolean")
                        .HasColumnName("can_contact");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FamilyName")
                        .HasColumnType("text")
                        .HasColumnName("family_name");

                    b.Property<string>("GivenName")
                        .HasColumnType("text")
                        .HasColumnName("given_name");

                    b.HasKey("Id");

                    b.ToTable("users", "hotfi");
                });

            modelBuilder.Entity("HotFi.Library.Models.DigitalOceanDroplet", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text")
                        .HasColumnName("application_user_id");

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean")
                        .HasColumnName("archived");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("archived_date");

                    b.Property<bool>("Backups")
                        .HasColumnType("boolean")
                        .HasColumnName("backups");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Domain")
                        .HasColumnType("text")
                        .HasColumnName("domain");

                    b.Property<string>("DropletId")
                        .HasColumnType("text")
                        .HasColumnName("droplet_id");

                    b.Property<string>("DropletName")
                        .HasColumnType("text")
                        .HasColumnName("droplet_name");

                    b.Property<string>("ImageSlug")
                        .HasColumnType("text")
                        .HasColumnName("image_slug");

                    b.Property<bool>("Ipv6")
                        .HasColumnType("boolean")
                        .HasColumnName("ipv6");

                    b.Property<bool>("Monitoring")
                        .HasColumnType("boolean")
                        .HasColumnName("monitoring");

                    b.Property<bool>("PublicNetworking")
                        .HasColumnType("boolean")
                        .HasColumnName("public_networking");

                    b.Property<string>("Region")
                        .HasColumnType("text")
                        .HasColumnName("region");

                    b.Property<DateTime?>("ScriptsCompletedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("scripts_completed_date");

                    b.Property<string>("Size")
                        .HasColumnType("text")
                        .HasColumnName("size");

                    b.Property<string[]>("SshKeys")
                        .HasColumnType("text[]")
                        .HasColumnName("ssh_keys");

                    b.Property<string[]>("Tags")
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<string>("UserData")
                        .HasColumnType("text")
                        .HasColumnName("user_data");

                    b.Property<string[]>("Volumes")
                        .HasColumnType("text[]")
                        .HasColumnName("volumes");

                    b.Property<string>("VpcUuid")
                        .HasColumnType("text")
                        .HasColumnName("vpc_uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("droplets", "hotfi");
                });

            modelBuilder.Entity("HotFi.Library.Models.ServerInformation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ApplicationServiceName")
                        .HasColumnType("text")
                        .HasColumnName("application_service_name");

                    b.Property<string>("ApplicationSshVaultKey")
                        .HasColumnType("text")
                        .HasColumnName("application_ssh_vault_key");

                    b.Property<string>("ApplicationUsername")
                        .HasColumnType("text")
                        .HasColumnName("application_username");

                    b.Property<string>("DigitalOceanDropletId")
                        .HasColumnType("text")
                        .HasColumnName("digital_ocean_droplet_id");

                    b.Property<string>("DropletId")
                        .HasColumnType("text")
                        .HasColumnName("droplet_id");

                    b.Property<string>("UserSshVaultKey")
                        .HasColumnType("text")
                        .HasColumnName("user_ssh_vault_key");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("DigitalOceanDropletId");

                    b.ToTable("server_information", "hotfi");
                });

            modelBuilder.Entity("HotFi.Library.Models.Application", b =>
                {
                    b.HasOne("HotFi.Library.Models.DigitalOceanDroplet", null)
                        .WithMany("Applications")
                        .HasForeignKey("DigitalOceanDropletId");

                    b.HasOne("HotFi.Library.Models.ApplicationUser", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotFi.Library.Models.DigitalOceanDroplet", b =>
                {
                    b.HasOne("HotFi.Library.Models.ApplicationUser", null)
                        .WithMany("Droplets")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("HotFi.Library.Models.ServerInformation", b =>
                {
                    b.HasOne("HotFi.Library.Models.DigitalOceanDroplet", "DigitalOceanDroplet")
                        .WithMany()
                        .HasForeignKey("DigitalOceanDropletId");

                    b.Navigation("DigitalOceanDroplet");
                });

            modelBuilder.Entity("HotFi.Library.Models.ApplicationUser", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Droplets");
                });

            modelBuilder.Entity("HotFi.Library.Models.DigitalOceanDroplet", b =>
                {
                    b.Navigation("Applications");
                });
#pragma warning restore 612, 618
        }
    }
}
